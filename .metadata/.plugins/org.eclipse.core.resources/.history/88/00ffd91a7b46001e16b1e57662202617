package day2;
import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static org.hamcrest.Matchers.*;

import java.io.File;
import java.util.HashMap;

import org.json.JSONObject;
import org.json.JSONTokener;
import org.testng.annotations.Test;

import java.io.FileReader;
import jdk.internal.net.http.common.Log;


public class WayToPostData 
{
	
	//@Test(priority=1)
	public void createStudent()
	{
		
		HashMap data = new HashMap();
		data.put("name", "Dimitro Kovienko");
		data.put("location", "Rusia");
		data.put("phone", "9832421037");
		String courseArr[] = {"JAVA","VC++"};
		data.put("courses", courseArr);
		
		given()
			.contentType("application/json")
			.body(data)
		
		.when()
			
			.post("http://localhost:3000/student_record")
		
		.then()
			.statusCode(201)
			.body("name",equalTo("Dimitro Kovienko"))
			.body("location", equalTo("Rusia"))
			.body("phone",equalTo("9832421037"))
			.body("courses[0]",equalTo("JAVA"))
			.body("courses[1]",equalTo("VC++"))
			.header("Content-Type","application/json; charset=utf-8")
			
			.log().all();
	}
	
	
	
	//@Test(priority=1)
	public void createStudentOrgJson()
	{
				
		JSONObject data = new JSONObject();
		data.put("name", "Natalia Simonova");
		data.put("location", "Severnaya");
		data.put("phone", "9944883300");
		String courseArr[] = {"VB","Perl Script"};
		data.put("courses", courseArr);
		
		given()
			.contentType("application/json")
			.body(data.toString())
		
		.when()
			
			.post("http://localhost:3000/student_record")
		
		.then()
			.statusCode(201)
			.body("name",equalTo("Natalia Simonova"))
			.body("location", equalTo("Severnaya"))
			.body("phone",equalTo("9944883300"))
			.body("courses[0]",equalTo("VB"))
			.body("courses[1]",equalTo("Perl Script"))
			.header("Content-Type","application/json; charset=utf-8")
			
			.log().all();
	}
	
	
	
	
	//@Test
	public void createStudentPojoClass()
	{
		String courseArr[] = {"JAVA","Cobol"};
		
		Pojo_PostRequest data = new Pojo_PostRequest();
		
		data.setName("Natalia Simonova");
		data.setLocation("Severnaya");
		data.setPhone("9944883300");
		data.setcourses(courseArr);
		
		
		
		given()
			.contentType("application/json")
			.body(data)
		
		.when()
			
			.post("http://localhost:3000/student_record")
		
		.then()
			.statusCode(201)
			.body("name",equalTo("Natalia Simonova"))
			.body("location", equalTo("Severnaya"))
			.body("phone",equalTo("9944883300"))
			.body("courses[0]",equalTo("JAVA"))
			.body("courses[1]",equalTo("Cobol"))
			.header("Content-Type","application/json; charset=utf-8")
			
			.log().all();
	}
	
	
	
	
	
	@Test
	public void createStudentExternalJsonFile()
	{
//		String courseArr[] = {"JAVA","Cobol"};
//		
//		Pojo_PostRequest data = new Pojo_PostRequest();
//		
//		data.setName("Natalia Simonova");
//		data.setLocation("Severnaya");
//		data.setPhone("9944883300");
//		data.setcourses(courseArr);
		
//		{
//	        "id": 4,
//	        "name": "Private Kovienko",
//	        "location": "Stalingrade",
//	        "phone": "1111111111",
//	        "courses": [
//	            "Sniper",
//	            "Sub_machine_gunner"
//	        ]
//	    }
		
		
		File jsonFile = new File(".\\src\\test\\resources\\body.json");
		FileReader jsonFileReader = new FileReader(jsonFile);
		JSONTokener jsonToken = new JSONTokener("");
		JSONObject data = new JSONObject(jsonToken);
		
		given()
			.contentType("application/json")
			.body(data.toString())
		
		.when()
			
			.post("http://localhost:3000/student_record")
		
		.then()
			.statusCode(201)
			.body("name",equalTo("Natalia Simonova"))
			.body("location", equalTo("Severnaya"))
			.body("phone",equalTo("9944883300"))
			.body("courses[0]",equalTo("JAVA"))
			.body("courses[1]",equalTo("Cobol"))
			.header("Content-Type","application/json; charset=utf-8")
			
			.log().all();
	}
	
	

	
	
	@Test(priority=1)
	public void listAllStudent()
	{
		given()
		
		.when()
			.get("http://localhost:3000/student_record")
		
		.then()
			.statusCode(200)
			.log().all();
	}
	
	
	
	@Test(priority=1,dependsOnMethods = {"listAllStudent"})
	public void listSingleStudent()
	{
		
	}
	
	
	
	@Test(priority=1,dependsOnMethods = {"listSingleStudent"})
	public void updateStudent()
	{
		
	}
	
	
	@Test(priority=1,dependsOnMethods = {"updateStudent"})
//	public void deleteStudent(int i)
	public void deleteStudent()
	{
		given()
		
		.when()
//			.delete("http://localhost:3000/student_record/"+i)
			.delete("http://localhost:3000/student_record/6")
			
		.then()
			.statusCode(200);
			System.out.println("Deleted");
		
	}
	
//	
//	public void callMethod() throws InterruptedException
//	{
//		WayToPostData obj = new WayToPostData();
//		obj.createStudent();Thread.sleep(1000);
//		obj.createStudent();Thread.sleep(1000);
//		obj.createStudent();Thread.sleep(1000);
//		
//		int u=9;
//		obj.deleteStudent(u); u--;Thread.sleep(1000);
//		obj.deleteStudent(u); u--;Thread.sleep(1000);
//		obj.deleteStudent(u);Thread.sleep(1000);
//		
//	}
	
}
